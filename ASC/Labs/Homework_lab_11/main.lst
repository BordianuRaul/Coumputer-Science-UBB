     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  
     6                                  extern exit,printf,scanf,fopen,fprintf,fclose,find_maximum
     7                                  import exit msvcrt.dll    
     8                                  import printf msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                                            
    14                                  
    15                                  
    16                                  segment data use32 class=data
    17                                  
    18                                      ;Exercise data
    19 00000000 486F77206D616E7920-         input_message db "How many numbers do you want to read: ",0
    19 00000009 6E756D626572732064-
    19 00000012 6F20796F752077616E-
    19 0000001B 7420746F2072656164-
    19 00000024 3A2000             
    20 00000027 256400                      format_read_number db "%d",0
    21 0000002A 00000000                    number_of_elemets dd 0
    22 0000002E 00000000                    current_number dd 0
    23 00000032 00000000                    max_number dd 0
    24                                      
    25                                      ;File operation data
    26 00000036 6D6178696D756D2E74-         file_name db "maximum.txt",0
    26 0000003F 787400             
    27 00000042 7700                        acces_mod db "w",0
    28 00000044 546865206D6178696D-         print_message db "The maximum value which was read, represented in hexa is: %x",0
    28 0000004D 756D2076616C756520-
    28 00000056 776869636820776173-
    28 0000005F 20726561642C207265-
    28 00000068 70726573656E746564-
    28 00000071 20696E206865786120-
    28 0000007A 69733A20257800     
    29 00000081 FFFFFFFF                    descrpitor_fis dd -1
    30 00000085 00000000                    aux dd 0
    31                                      
    32                                      
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ;Print input message, "How many numbers to you want to read?"
    36 00000000 68[00000000]                    push dword input_message
    37 00000005 FF15[00000000]                  call [printf]
    38 0000000B 83C404                          add ESP,4
    39                                          
    40                                          ;Reads how many numbers the user wants to introduce
    41 0000000E 68[2A000000]                    push dword number_of_elemets
    42 00000013 68[27000000]                    push dword format_read_number
    43 00000018 FF15[00000000]                  call [scanf]
    44 0000001E 83C408                          add ESP,4*2
    45                                          
    46 00000021 8B0D[2A000000]                  mov ECX,[number_of_elemets]
    47                                          
    48                                          loop_ECX:
    49 00000027 890D[85000000]                  mov dword [aux],ECX
    50                                          
    51                                              ;We move into current_number the input from the user
    52 0000002D 68[2E000000]                        push dword current_number
    53 00000032 68[27000000]                        push dword format_read_number
    54 00000037 FF15[00000000]                      call [scanf]
    55 0000003D 83C408                              add ESP,4*2
    56                                               
    57                                              
    58 00000040 A1[2E000000]                        mov EAX,[current_number] ; we move into EAX, the value that was last introduced by the user
    59 00000045 8B1D[32000000]                      mov EBX,[max_number] ; we move into EBX the maximum value that was introduced until the now
    60                                              
    61 0000004B 50                                  push EAX ; we push EAX to the stack
    62 0000004C 53                                  push EBX ; we push EBX to the stack  
    63 0000004D E8(00000000)                        call find_maximum ; we call the find_maximum module
    64 00000052 83C404                              add ESP,4
    65                                              
    66 00000055 83F800                              cmp EAX,0 ; if EAX is 0, it means that the current value is less or equal than the maximum value
    67 00000058 7405                                je dont_change_max
    68                                              
    69                                              ;If the jump was not executed, then the current value is the new maximum value
    70 0000005A A3[32000000]                        mov dword [max_number],EAX ; we save into maximum, the maximum value read until now
    71                                              
    72                                              dont_change_max:
    73                                              
    74 0000005F 8B0D[85000000]                      mov ECX,dword [aux] ; because the value of ECX was altered when we called "scanf" we must move the value saved in aux, which was the                   initial value of ECX
    75 00000065 E2C0                            loop loop_ECX
    76                                          
    77                                          ;Write into a file the maximum value read, in hexa
    78                                          
    79                                          ;Open the file
    80 00000067 68[42000000]                    push dword acces_mod
    81 0000006C 68[36000000]                    push dword file_name
    82 00000071 FF15[00000000]                  call [fopen]
    83 00000077 83C408                          add ESP,4*2
    84                                          
    85 0000007A A3[81000000]                    mov [descrpitor_fis],EAX
    86 0000007F 83F800                          cmp EAX,0 
    87 00000082 7429                            je final
    88                                          
    89                                          ;Write the maximum value which was read in the file, in hexa representation
    90 00000084 FF35[32000000]                  push dword [max_number]
    91 0000008A 68[44000000]                    push dword print_message
    92 0000008F FF35[81000000]                  push dword [descrpitor_fis]
    93 00000095 FF15[00000000]                  call [fprintf]
    94 0000009B 83C40C                          add ESP,4*3
    95                                          
    96                                          ;Close the file:
    97 0000009E FF35[81000000]                  push dword [descrpitor_fis]
    98 000000A4 FF15[00000000]                  call [fclose]
    99 000000AA 83C404                          add esp,4
   100                                          
   101                                          final:
   102 000000AD 6A00                            push    dword 0      
   103 000000AF FF15[00000000]                  call    [exit]       
