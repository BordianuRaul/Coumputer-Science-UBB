     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,c- word
    14                                      ; b,d- byte;
    15                                      ; e- doubleword
    16                                      ; x- qword
    17                                      
    18 00000000 1027000000000000            x dq 10000
    19 00000008 3200                        a dw 50
    20 0000000A 0A                          b db 10
    21 0000000B 6400                        c dw 100
    22 0000000D 14                          d db 20
    23 0000000E 64000000                    e dd 100
    24                                      
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; x/2+100*(a+b)-3/(c+d)+e*e (Unsigned)
    30                                          
    31                                          ; x / 2
    32                                          
    33 00000000 A1[00000000]                    mov EAX, [x + 0]
    34 00000005 8B15[04000000]                  mov EDX, [x + 4] ; EDX:EAX = x = 10.000
    35                                          
    36 0000000B B902000000                      mov ECX, 2 ; ECX = 2
    37                                          
    38 00000010 F7F1                            div ECX ;  EAX = EDX:EAX / ECX = 10.000 / 2 = 5000 = x/2
    39                                                  ;  EDX = EDX:EAX % ECX = 10.000 % 2 = 0
    40                                                  
    41 00000012 89C1                            mov ECX, EAX ; ECX = x / 2 = 5000
    42                                          
    43                                          ;100 * (a + b)
    44                                          
    45 00000014 66A1[08000000]                  mov AX, [a] ; AX = a = 50
    46                                          
    47 0000001A 8A1D[0A000000]                  mov BL, [b] ; BL = b = 10
    48 00000020 B700                            mov BH, 0 ; BX = b = 10
    49                                          
    50 00000022 6601D8                          add AX, BX ; AX = AX + BX = a + b = 50 + 10 = 60
    51                                          
    52 00000025 66BB6400                        mov BX, 100 ; BX = 100
    53                                          
    54 00000029 66F7E3                          mul BX ; DX:AX = AX * BX = (a + b) * 100 = 6000
    55                                          
    56 0000002C 6652                            push DX
    57                                          
    58 0000002E 6650                            push AX
    59                                          
    60 00000030 5B                              pop EBX ; EBX = DX:AX = (a + b) * 100 = 6000
    61                                          
    62 00000031 01D9                            add ECX, EBX ; ECX = x/2 + 100*(a+b) = 1100
    63                                          
    64                                          ; 3/(c + d)
    65                                          
    66 00000033 66A1[0B000000]                  mov AX, [c] ; AX = c = 100
    67                                          
    68 00000039 8A1D[0D000000]                  mov BL, [d] ; BL = d = 20
    69 0000003F B700                            mov BH, 0 ; BX = d = 20
    70                                          
    71 00000041 6601C3                          add BX, AX ; BX = BX + AX = d + c = 20 + 100 = 120
    72                                          
    73 00000044 66B80300                        mov AX, 3 ; AX = 3
    74                                          
    75 00000048 66BA0000                        mov DX, 0 ; DX:AX = 3
    76                                          
    77 0000004C 66F7F3                          div BX ; AX = DX:AX / BX = 3 / 120 = 0
    78                                                 ; DX = DX:AX % BX = 3 % 120 = 3
    79                                          
    80 0000004F 66BA0000                        mov DX, 0 ; DX:AX = 0 = 3/(c+d)
    81                                          
    82 00000053 6652                            push DX
    83                                          
    84 00000055 6650                            push AX
    85                                          
    86 00000057 58                              pop EAX ; EAX = DX:AX = 3/(c+d) = 0
    87                                          
    88 00000058 29C1                            sub ECX, EAX ; ECX = x/2 + 100*(a+b) - 3/(c+d) = 11000
    89                                          
    90                                          ; e*e
    91                                          
    92 0000005A A1[0E000000]                    mov EAX, [e] ; EAX = e = 100
    93                                          
    94 0000005F F7E0                            mul EAX ; EDX:EAX = EAX * EAX = 10.000
    95                                          
    96                                          ; x/2 + 100*(a+b) - 3/(c+d) + e*e
    97                                          
    98 00000061 89CB                            mov EBX, ECX ; EAX = ECX = x/2 + 100*(a+b) - 3/(c+d) = 11000
    99                                          
   100 00000063 B900000000                      mov ECX, 0 ; ECX:EBX = x/2 + 100*(a+b) - 3/(c+d) = 11000
   101                                          
   102 00000068 01C3                            add EBX, EAX ;
   103 0000006A 01D1                            add ECX, EDX ;  ECX:EBX = ECX:EBX + EDX:EAX = x/2 + 100*(a+b) - 3/(c+d) + e*e = 21.000
   104                                          
   105                                          
   106                                          
   107                                          ; exit(0)
   108 0000006C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   109 0000006E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
