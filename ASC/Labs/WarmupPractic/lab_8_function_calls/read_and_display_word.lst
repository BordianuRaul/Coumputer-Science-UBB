     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      
    16 00000000 257300                      format_read db "%s",0
    17 00000003 576F72642072656164-         format_print db "Word read: %s", 0
    17 0000000C 3A20257300         
    18 00000011 00<rept>                    string times 100 db 0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24                                          
    25 00000000 68[11000000]                    push dword string
    26 00000005 68[00000000]                    push dword format_read
    27 0000000A FF15[00000000]                  call [scanf]
    28 00000010 83C408                          add ESP, 4 * 2
    29                                          
    30 00000013 BE00000000                      mov ESI, 0
    31 00000018 B900000000                      mov ECX, 0
    32                                          
    33                                          while:
    34                                          
    35 0000001D 8A86[11000000]                      mov AL, [string + ESI]
    36                                              
    37 00000023 3C00                                cmp AL, byte 0
    38                                              
    39 00000025 7404                                je break
    40                                              
    41 00000027 41                                  inc ECX
    42 00000028 46                                  inc ESI
    43                                              
    44                                              
    45 00000029 EBF2                            jmp while
    46                                          
    47                                          break:
    48                                          
    49 0000002B 68[11000000]                    push dword string
    50 00000030 68[03000000]                    push dword format_print
    51 00000035 FF15[00000000]                  call [printf]
    52 0000003B 83C408                          add ESP, 4 * 2
    53                                           
    54                                          ; exit(0)
    55 0000003E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000040 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
