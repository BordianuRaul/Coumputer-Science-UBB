     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific function
    10                                  import printf msvcrt.dll 
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;
    14 00000000 C3260000                    a dd 9923
    15 00000004 E8030000                    b dd 1000
    16                                      
    17 00000008 2564202A202564203D-         format db "%d * %d = %d",0
    17 00000011 20256400           
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; Two natural numbers a and b (a, b: dword, defined in the data segment) are given. Calculate their product and display the result in the following format: "<a> * <b> = <result>". Example: "2 * 4 = 8"
    23                                          ;The values will be displayed in decimal format (base 10) with sign.
    24                                          
    25 00000000 A1[00000000]                    mov EAX, [a]
    26 00000005 8B1D[04000000]                  mov EBX, [b]
    27                                          
    28 0000000B F7E3                            mul EBX
    29                                          
    30 0000000D 8B0D[00000000]                  mov ECX, [a]
    31                                          
    32 00000013 52                              push EDX
    33 00000014 50                              push EAX
    34 00000015 53                              push EBX
    35 00000016 51                              push ECX
    36 00000017 68[08000000]                    push format
    37 0000001C FF15[00000000]                  call [printf]
    38 00000022 83C414                          add ESP, 4 * 5
    39                                          
    40                                          ; exit(0)
    41 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
