     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; A character string is given (defined in the data segment). Read one character from the keyboard, then count the number of occurences of that character in the given string and display the character along with i
    15                                      
    16 00000000 68656C6C6F20776F72-         s db "hello world",0
    16 00000009 6C6400             
    17                                      len_s equ $ - s
    18                                  
    19 0000000C 256300                      format_read db "%c",0
    20                                  
    21                                      
    22 0000000F 63686172203D2000            format_print_char db "char = ",0
    23 00000017 546865206368617261-         format_print_result db "The character %c appeard %d times in the string",0
    23 00000020 637465722025632061-
    23 00000029 707065617264202564-
    23 00000032 2074696D657320696E-
    23 0000003B 207468652073747269-
    23 00000044 6E6700             
    24                                      
    25                                          
    26 00000047 00                          char db 0
    27                                      
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32                                          
    33 00000000 68[0F000000]                    push dword format_print_char
    34 00000005 FF15[00000000]                  call [printf]
    35 0000000B 83C404                          add esp, 4
    36                                          
    37 0000000E 68[47000000]                    push dword char
    38 00000013 68[0C000000]                    push dword format_read
    39 00000018 FF15[00000000]                  call [scanf]
    40 0000001E 83C408                          add esp, 4 * 2
    41                                          
    42 00000021 B90C000000                      mov ECX, len_s
    43 00000026 BE00000000                      mov ESI, 0
    44 0000002B BB00000000                      mov EBX, 0
    45                                          
    46                                          loop_s:
    47                                              
    48 00000030 8A86[00000000]                      mov AL, [s + ESI]
    49                                              
    50 00000036 8A25[47000000]                      mov AH, [char]
    51                                              
    52 0000003C 38E0                                cmp AL, AH
    53                                              
    54 0000003E 7501                                jne dont_add
    55                                              
    56 00000040 43                                  inc EBX
    57                                              
    58                                              dont_add:
    59                                              
    60 00000041 46                                  inc ESI
    61                                              
    62 00000042 E2EC                            loop loop_s
    63 00000044 A1[47000000]                    mov EAX, dword [char]
    64                                          
    65 00000049 53                              push EBX
    66 0000004A 50                              push EAX
    67 0000004B 68[17000000]                    push format_print_result
    68 00000050 FF15[00000000]                  call [printf]
    69 00000056 83C40C                          add ESP, 4 * 3
    70                                      
    71                                          ; exit(0)
    72 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    73 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
