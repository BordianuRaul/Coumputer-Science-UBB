     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ;
    16                                      
    17 00000000 00000000                    a dd 0
    18 00000004 00000000                    b dd 0
    19 00000008 257800                      format_read_number db "%x", 0
    20 0000000B 61202B2062203D2025-         format_print db "a + b = %d", 0
    20 00000014 6400               
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; Read two numbers a and b (in base 16) from the keyboard and calculate a+b. Display the result in base 10
    26                                          
    27 00000000 68[00000000]                    push a
    28 00000005 68[08000000]                    push format_read_number
    29 0000000A FF15[00000000]                  call [scanf]
    30 00000010 83C408                          add ESP, 4 * 2
    31                                          
    32 00000013 68[04000000]                    push b
    33 00000018 68[08000000]                    push format_read_number
    34 0000001D FF15[00000000]                  call [scanf]
    35 00000023 83C408                          add ESP, 4 * 2
    36                                          
    37 00000026 A1[00000000]                    mov EAX, [a]
    38 0000002B 8B1D[04000000]                  mov EBX, [b]
    39 00000031 89C1                            mov ECX, EAX
    40 00000033 01D9                            add ECX, EBX
    41                                          
    42 00000035 51                              push ECX
    43 00000036 68[0B000000]                    push format_print
    44 0000003B FF15[00000000]                  call [printf]
    45 00000041 83C408                          add ESP, 4 * 2
    46                                          
    47                                          
    48                                      
    49                                          ; exit(0)
    50 00000044 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000046 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
