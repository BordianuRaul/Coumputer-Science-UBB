     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; 
    14                                           
    15 00000000 785634124D3C2B1A76-         s DD 12345678h, 1A2B3C4Dh, 1E98DC76h
    15 00000009 DC981E             
    16                                      
    17                                      len_s equ $ - s
    18                                      
    19 0000000C 00<rept>                    d times len_s db 0
    20                                      
    21 00000018 0A                          ten db 10
    22                                      
    23 00000019 04                          four db 4
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; A string of doublewords is given. Compute the string formed by the high bytes of the low words from the elements of the doubleword string and these bytes should be multiple of 10.
    29                                          
    30                                          
    31 00000000 B80C000000                      mov EAX, len_s
    32 00000005 F635[19000000]                  div  byte [four]
    33 0000000B 89C1                            mov ECX, EAX
    34                                          
    35 0000000D BF00000000                      mov EDI, 0
    36                                          
    37 00000012 BE[00000000]                    mov ESI, s
    38 00000017 BF[0C000000]                    mov EDI, d
    39                                          
    40                                          loop_s:
    41                                          
    42 0000001C AD                                  lodsd
    43                                              
    44 0000001D 89C3                                mov EBX, EAX
    45                                              
    46 0000001F 88F8                                mov AL, BH
    47 00000021 B400                                mov AH, 0
    48                                              
    49 00000023 F635[18000000]                      div byte [ten]
    50                                              
    51 00000029 80FC00                              cmp AH, 0
    52                                              
    53 0000002C 7503                                jne is_not_multiple_of_10
    54                                              
    55 0000002E 88F8                                mov AL, BH
    56                                              
    57 00000030 AA                                  stosb
    58                                              
    59                                              is_not_multiple_of_10:
    60                                              
    61 00000031 E2E9                            loop loop_s
    62                                          
    63                                          
    64                                          ; exit(0)
    65 00000033 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000035 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
