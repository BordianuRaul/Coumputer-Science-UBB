     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; A byte string S of length l is given. Obtain the string D of length l-1 so that the elements of D represent the difference between every two consecutive elements of S
    14                                      
    15 00000000 050A142850A0                S db 5, 10, 20, 40, 80, 160
    16                                      len_S equ $ - S
    17 00000006 00<rept>                    D times len_S - 1 db 0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          
    24 00000000 B906000000                      mov ECX, len_S
    25 00000005 BE00000000                      mov ESI, 0
    26 0000000A BF00000000                      mov EDI, 0
    27                                          
    28 0000000F 49                              dec ECX
    29                                          
    30                                          loop_S:
    31                                          
    32 00000010 8A86[01000000]                      mov AL, [S + ESI + 1]
    33 00000016 8A9E[00000000]                      mov BL, [S + ESI]
    34                                              
    35 0000001C 28D8                                sub AL, BL
    36                                              
    37 0000001E 8887[06000000]                      mov [D + EDI], AL
    38                                              
    39 00000024 46                                  inc ESI
    40 00000025 47                                  inc EDI
    41                                          
    42 00000026 E2E8                            loop loop_S
    43                                          
    44                                          ; exit(0)
    45 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
